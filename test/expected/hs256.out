-- discard keys possibly left from previous test run, reconnect
ALTER DATABASE :DBNAME RESET ALL;
\connect
-- generate two secrets
SELECT * FROM jwt_generate_secret('HS256') AS secret \gset
SELECT * FROM jwt_generate_secret('HS256') AS secret2 \gset
-- generate an invalid signed context, with incorrect header (algorithm mismatch)
SELECT jwt_sign('HS256', :'secret', '{"alg": "ES256"}', '{"id": 123456, "exp": 123456789}') AS context \gset
-- the header says ES256, so the key is used as private key
SELECT jwt_verify(:'secret', :'context');
ERROR:  failed to read key
-- generate a valid signed context
SELECT jwt_sign('HS256', :'secret', '{"alg": "HS256"}', '{"id": 123456, "exp": 123456789}') AS context \gset
-- can't verify using a different secret
SELECT jwt_verify(:'secret2', :'context');
 jwt_verify 
------------
 f
(1 row)

-- verify the signature with the right secret
SELECT jwt_verify(:'secret', :'context');
 jwt_verify 
------------
 t
(1 row)

-- try to set it without the secret key set
SET jwt.context = :'context';
ERROR:  no key defined
-- set the key for the database, reconnect
ALTER DATABASE :DBNAME SET jwt.secret = :'secret';
\connect
-- verify the context (function call forces loading the library, which
-- is what sets the check/assign hooks we need)
SELECT jwt_verify(NULL, :'context');
 jwt_verify 
------------
 t
(1 row)

-- some bogus contexts first
SET jwt.context = 'blahblah';
ERROR:  failed to parse JWT token header (separator not found)
SET jwt.context = 'foo:bar';
ERROR:  failed to parse JWT token header (separator not found)
SET jwt.context = 'foo:bar:baz';
ERROR:  failed to parse JWT token header (separator not found)
SHOW jwt.context;
 jwt.context 
-------------
 (not set)
(1 row)

-- now the correctly signed context
SET jwt.context = :'context';
SHOW jwt.context;
           jwt.context            
----------------------------------
 {"id": 123456, "exp": 123456789}
(1 row)

-- whole context
SELECT jwt();
               jwt                
----------------------------------
 {"id": 123456, "exp": 123456789}
(1 row)

-- existing key
SELECT jwt('id');
  jwt   
--------
 123456
(1 row)

-- missing key
SELECT jwt('xid');
 jwt 
-----
 
(1 row)

